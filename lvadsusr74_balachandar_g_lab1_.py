# -*- coding: utf-8 -*-
"""LVADSUSR74- BALACHANDAR G - Lab1 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jJztNpt9_p_QAcR3WK63QLmBohtELvai
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.ensemble import IsolationForest
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,mean_absolute_error
from sklearn.metrics import classification_report,confusion_matrix

df = pd.read_csv("/content/sample_data/winequality-red.csv")
df.info()

df.isnull().sum()
df.fillna(method ='ffill',inplace = True)
df.fillna(method = 'bfill',inplace = True)

df.isnull().sum()

df.duplicated().sum()
df.drop_duplicates()

df['residual sugar'].plot(kind='hist', bins=20, title='residual sugar',color = 'g')
plt.gca().spines[['top', 'right',]].set_visible(False)

#visualisation

df.plot(kind='scatter', x='citric acid', y='residual sugar', s=32, alpha=.8,color = 'g')
plt.gca().spines[['top', 'right',]].set_visible(False)

plt.figure(figsize=(20,15))
sns.boxplot(data = df)
plt.title("Identifying outliers")
plt.show()

df_55=pd.DataFrame(df)

iso = IsolationForest(contamination=0.1)
outliers = iso.fit_predict(df_55['total sulfur dioxide'].values.reshape(-1,1))

#print(outliers)
dd=df.drop(df_55.iloc[np.where(outliers== -1)].index,inplace=False)
print("The removed outliers:","\n",dd)

plt.figure(figsize = (20,15))
sns.boxplot(data = dd)
plt.title("After Removing outliers")
plt.show()

X = dd[["volatile acidity","citric acid","residual sugar","chlorides","total sulfur dioxide","sulphates","alcohol"]].values
y = dd["quality"].values

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 42)

clf_knn = KNeighborsClassifier(n_neighbors = 3)
clf_knn.fit(X_train,y_train)
a_knn = clf_knn.predict(X_test)

clf = RandomForestClassifier()
clf.fit(X_train,y_train)
a = clf.predict(X_test)


print("The accuracy score of the KNN model:",accuracy_score(y_test,a_knn))
print("The precision Score of the KNN model:",precision_score(y_test,a_knn))
print("The recall for the KNN model:",recall_score(y_test,a_knn))

print("The accuracy score of the Random Forest model:",accuracy_score(y_test,a))
print("The precision Score of the Random Forest model:",precision_score(y_test,a))
print("The recall for the Random Forest model:",recall_score(y_test,a))


#The best model for prediction is Random Forest Classifier

